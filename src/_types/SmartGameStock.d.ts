/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface SmartGameStockInterface extends ethers.utils.Interface {
  functions: {
    "BUSD()": FunctionFragment;
    "CARS_STOCK_PRICE()": FunctionFragment;
    "ROBOTS_STOCK_PRICE()": FunctionFragment;
    "SMART_CARS()": FunctionFragment;
    "SMART_ROBOTS()": FunctionFragment;
    "busdBalanceOf(address)": FunctionFragment;
    "buySmartCarStock(uint256)": FunctionFragment;
    "buySmartRobotStock(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "remainingCarStock()": FunctionFragment;
    "remainingRobotStock()": FunctionFragment;
    "stcBalanceOf(address)": FunctionFragment;
    "strBalanceOf(address)": FunctionFragment;
    "withdrawToken(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "BUSD", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "CARS_STOCK_PRICE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROBOTS_STOCK_PRICE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SMART_CARS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SMART_ROBOTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "busdBalanceOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "buySmartCarStock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buySmartRobotStock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "remainingCarStock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "remainingRobotStock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stcBalanceOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "strBalanceOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "BUSD", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CARS_STOCK_PRICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROBOTS_STOCK_PRICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "SMART_CARS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "SMART_ROBOTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "busdBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buySmartCarStock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buySmartRobotStock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "remainingCarStock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remainingRobotStock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stcBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "strBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;

  events: {
    "BuySmartCarStock(address,uint256)": EventFragment;
    "BuySmartRobotStock(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BuySmartCarStock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BuySmartRobotStock"): EventFragment;
}

export class SmartGameStock extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SmartGameStockInterface;

  functions: {
    BUSD(overrides?: CallOverrides): Promise<[string]>;

    "BUSD()"(overrides?: CallOverrides): Promise<[string]>;

    CARS_STOCK_PRICE(overrides?: CallOverrides): Promise<[BigNumber]>;

    "CARS_STOCK_PRICE()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    ROBOTS_STOCK_PRICE(overrides?: CallOverrides): Promise<[BigNumber]>;

    "ROBOTS_STOCK_PRICE()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    SMART_CARS(overrides?: CallOverrides): Promise<[string]>;

    "SMART_CARS()"(overrides?: CallOverrides): Promise<[string]>;

    SMART_ROBOTS(overrides?: CallOverrides): Promise<[string]>;

    "SMART_ROBOTS()"(overrides?: CallOverrides): Promise<[string]>;

    busdBalanceOf(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "busdBalanceOf(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    buySmartCarStock(
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "buySmartCarStock(uint256)"(
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buySmartRobotStock(
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "buySmartRobotStock(uint256)"(
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    remainingCarStock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "remainingCarStock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    remainingRobotStock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "remainingRobotStock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    stcBalanceOf(user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "stcBalanceOf(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    strBalanceOf(user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "strBalanceOf(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdrawToken(
      token: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawToken(address,uint256)"(
      token: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  BUSD(overrides?: CallOverrides): Promise<string>;

  "BUSD()"(overrides?: CallOverrides): Promise<string>;

  CARS_STOCK_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

  "CARS_STOCK_PRICE()"(overrides?: CallOverrides): Promise<BigNumber>;

  ROBOTS_STOCK_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

  "ROBOTS_STOCK_PRICE()"(overrides?: CallOverrides): Promise<BigNumber>;

  SMART_CARS(overrides?: CallOverrides): Promise<string>;

  "SMART_CARS()"(overrides?: CallOverrides): Promise<string>;

  SMART_ROBOTS(overrides?: CallOverrides): Promise<string>;

  "SMART_ROBOTS()"(overrides?: CallOverrides): Promise<string>;

  busdBalanceOf(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  "busdBalanceOf(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  buySmartCarStock(
    tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "buySmartCarStock(uint256)"(
    tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buySmartRobotStock(
    tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "buySmartRobotStock(uint256)"(
    tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  remainingCarStock(overrides?: CallOverrides): Promise<BigNumber>;

  "remainingCarStock()"(overrides?: CallOverrides): Promise<BigNumber>;

  remainingRobotStock(overrides?: CallOverrides): Promise<BigNumber>;

  "remainingRobotStock()"(overrides?: CallOverrides): Promise<BigNumber>;

  stcBalanceOf(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  "stcBalanceOf(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  strBalanceOf(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  "strBalanceOf(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawToken(
    token: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawToken(address,uint256)"(
    token: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BUSD(overrides?: CallOverrides): Promise<string>;

    "BUSD()"(overrides?: CallOverrides): Promise<string>;

    CARS_STOCK_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    "CARS_STOCK_PRICE()"(overrides?: CallOverrides): Promise<BigNumber>;

    ROBOTS_STOCK_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    "ROBOTS_STOCK_PRICE()"(overrides?: CallOverrides): Promise<BigNumber>;

    SMART_CARS(overrides?: CallOverrides): Promise<string>;

    "SMART_CARS()"(overrides?: CallOverrides): Promise<string>;

    SMART_ROBOTS(overrides?: CallOverrides): Promise<string>;

    "SMART_ROBOTS()"(overrides?: CallOverrides): Promise<string>;

    busdBalanceOf(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "busdBalanceOf(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buySmartCarStock(
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "buySmartCarStock(uint256)"(
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buySmartRobotStock(
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "buySmartRobotStock(uint256)"(
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    remainingCarStock(overrides?: CallOverrides): Promise<BigNumber>;

    "remainingCarStock()"(overrides?: CallOverrides): Promise<BigNumber>;

    remainingRobotStock(overrides?: CallOverrides): Promise<BigNumber>;

    "remainingRobotStock()"(overrides?: CallOverrides): Promise<BigNumber>;

    stcBalanceOf(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "stcBalanceOf(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    strBalanceOf(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "strBalanceOf(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawToken(
      token: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawToken(address,uint256)"(
      token: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    BuySmartCarStock(
      user: string | null,
      tokenAmount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; tokenAmount: BigNumber }
    >;

    BuySmartRobotStock(
      user: string | null,
      tokenAmount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; tokenAmount: BigNumber }
    >;
  };

  estimateGas: {
    BUSD(overrides?: CallOverrides): Promise<BigNumber>;

    "BUSD()"(overrides?: CallOverrides): Promise<BigNumber>;

    CARS_STOCK_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    "CARS_STOCK_PRICE()"(overrides?: CallOverrides): Promise<BigNumber>;

    ROBOTS_STOCK_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    "ROBOTS_STOCK_PRICE()"(overrides?: CallOverrides): Promise<BigNumber>;

    SMART_CARS(overrides?: CallOverrides): Promise<BigNumber>;

    "SMART_CARS()"(overrides?: CallOverrides): Promise<BigNumber>;

    SMART_ROBOTS(overrides?: CallOverrides): Promise<BigNumber>;

    "SMART_ROBOTS()"(overrides?: CallOverrides): Promise<BigNumber>;

    busdBalanceOf(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "busdBalanceOf(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buySmartCarStock(
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "buySmartCarStock(uint256)"(
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buySmartRobotStock(
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "buySmartRobotStock(uint256)"(
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    remainingCarStock(overrides?: CallOverrides): Promise<BigNumber>;

    "remainingCarStock()"(overrides?: CallOverrides): Promise<BigNumber>;

    remainingRobotStock(overrides?: CallOverrides): Promise<BigNumber>;

    "remainingRobotStock()"(overrides?: CallOverrides): Promise<BigNumber>;

    stcBalanceOf(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "stcBalanceOf(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    strBalanceOf(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "strBalanceOf(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawToken(
      token: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawToken(address,uint256)"(
      token: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BUSD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "BUSD()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CARS_STOCK_PRICE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "CARS_STOCK_PRICE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ROBOTS_STOCK_PRICE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ROBOTS_STOCK_PRICE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SMART_CARS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "SMART_CARS()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SMART_ROBOTS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "SMART_ROBOTS()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    busdBalanceOf(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "busdBalanceOf(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buySmartCarStock(
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "buySmartCarStock(uint256)"(
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buySmartRobotStock(
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "buySmartRobotStock(uint256)"(
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    remainingCarStock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "remainingCarStock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    remainingRobotStock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "remainingRobotStock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stcBalanceOf(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stcBalanceOf(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    strBalanceOf(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "strBalanceOf(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawToken(
      token: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawToken(address,uint256)"(
      token: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
