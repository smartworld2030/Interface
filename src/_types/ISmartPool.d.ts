/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import { TypedEventFilter, TypedEvent, TypedListener } from './commons'

interface SmartPool02Interface extends ethers.utils.Interface {
  functions: {
    'END_TIME()': FunctionFragment
    'MAX_SLIPPAGE()': FunctionFragment
    'REFERRAL()': FunctionFragment
    'REWARD()': FunctionFragment
    'addBlackList(address)': FunctionFragment
    'blacklist(address)': FunctionFragment
    'calculateBnb(uint256)': FunctionFragment
    'calculateDaily(address,uint256)': FunctionFragment
    'calculateInterest(address)': FunctionFragment
    'calculateLiquidityValue(uint256)': FunctionFragment
    'calculatePercent(uint256,uint256)': FunctionFragment
    'calculateRef(uint256)': FunctionFragment
    'calculateReward(uint256)': FunctionFragment
    'changeEndTime(uint256)': FunctionFragment
    'changeMax(uint256)': FunctionFragment
    'changeReferral(uint256)': FunctionFragment
    'changeReward(uint256)': FunctionFragment
    'freeze(address,uint256,uint256,uint256,uint256,uint256)': FunctionFragment
    'freezeInfo(uint256,uint256)': FunctionFragment
    'freezeLP(address,uint256,uint256)': FunctionFragment
    'lock()': FunctionFragment
    'owner()': FunctionFragment
    'preApprove()': FunctionFragment
    'removeBlackList(address)': FunctionFragment
    'sttsToBnbPrice()': FunctionFragment
    'totalLiquidity()': FunctionFragment
    'unfreeze(uint256,uint256,uint256)': FunctionFragment
    'unfreezeInfo(address,uint256)': FunctionFragment
    'unfreezeLP()': FunctionFragment
    'unlock()': FunctionFragment
    'updateFreeze(uint256,uint256,uint256,uint256)': FunctionFragment
    'updateFreezeLP(uint256)': FunctionFragment
    'userDepositDetails(address,uint256)': FunctionFragment
    'userDepositNumber(address)': FunctionFragment
    'users(address)': FunctionFragment
    'withdrawInterest()': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'END_TIME', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'MAX_SLIPPAGE',
    values?: undefined
  ): string
  encodeFunctionData(functionFragment: 'REFERRAL', values?: undefined): string
  encodeFunctionData(functionFragment: 'REWARD', values?: undefined): string
  encodeFunctionData(functionFragment: 'addBlackList', values: [string]): string
  encodeFunctionData(functionFragment: 'blacklist', values: [string]): string
  encodeFunctionData(
    functionFragment: 'calculateBnb',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'calculateDaily',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'calculateInterest',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'calculateLiquidityValue',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'calculatePercent',
    values: [BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'calculateRef',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'calculateReward',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'changeEndTime',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'changeMax',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'changeReferral',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'changeReward',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'freeze',
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'freezeInfo',
    values: [BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'freezeLP',
    values: [string, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'lock', values?: undefined): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(functionFragment: 'preApprove', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'removeBlackList',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'sttsToBnbPrice',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'totalLiquidity',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'unfreeze',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'unfreezeInfo',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'unfreezeLP', values?: undefined): string
  encodeFunctionData(functionFragment: 'unlock', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'updateFreeze',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'updateFreezeLP',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'userDepositDetails',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'userDepositNumber',
    values: [string]
  ): string
  encodeFunctionData(functionFragment: 'users', values: [string]): string
  encodeFunctionData(
    functionFragment: 'withdrawInterest',
    values?: undefined
  ): string

  decodeFunctionResult(functionFragment: 'END_TIME', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'MAX_SLIPPAGE',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'REFERRAL', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'REWARD', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'addBlackList',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'blacklist', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'calculateBnb',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'calculateDaily',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'calculateInterest',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'calculateLiquidityValue',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'calculatePercent',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'calculateRef',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'calculateReward',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'changeEndTime',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'changeMax', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'changeReferral',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'changeReward',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'freeze', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'freezeInfo', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'freezeLP', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'lock', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'preApprove', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'removeBlackList',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'sttsToBnbPrice',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'totalLiquidity',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'unfreeze', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'unfreezeInfo',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'unfreezeLP', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'unlock', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'updateFreeze',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'updateFreezeLP',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'userDepositDetails',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'userDepositNumber',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'users', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'withdrawInterest',
    data: BytesLike
  ): Result

  events: {
    'AddedBlackList(address)': EventFragment
    'Freeze(address,address,uint256)': EventFragment
    'FreezeLP(address,address,uint256)': EventFragment
    'PaymentRecived(address,uint256)': EventFragment
    'RemovedBlackList(address)': EventFragment
    'Unfreeze(address,uint256,uint256)': EventFragment
    'UnfreezeLP(address,uint256)': EventFragment
    'UpdateFreeze(address,uint256)': EventFragment
    'UpdateFreezeLP(address,uint256)': EventFragment
    'WithdrawInterest(address,uint256,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'AddedBlackList'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Freeze'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'FreezeLP'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'PaymentRecived'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RemovedBlackList'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Unfreeze'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'UnfreezeLP'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'UpdateFreeze'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'UpdateFreezeLP'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'WithdrawInterest'): EventFragment
}

export class ISmartPool02 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: SmartPool02Interface

  functions: {
    END_TIME(overrides?: CallOverrides): Promise<[BigNumber]>

    'END_TIME()'(overrides?: CallOverrides): Promise<[BigNumber]>

    MAX_SLIPPAGE(overrides?: CallOverrides): Promise<[BigNumber]>

    'MAX_SLIPPAGE()'(overrides?: CallOverrides): Promise<[BigNumber]>

    REFERRAL(overrides?: CallOverrides): Promise<[BigNumber]>

    'REFERRAL()'(overrides?: CallOverrides): Promise<[BigNumber]>

    REWARD(overrides?: CallOverrides): Promise<[BigNumber]>

    'REWARD()'(overrides?: CallOverrides): Promise<[BigNumber]>

    addBlackList(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'addBlackList(address)'(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    blacklist(arg0: string, overrides?: CallOverrides): Promise<[boolean]>

    'blacklist(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    calculateBnb(
      stts: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'calculateBnb(uint256)'(
      stts: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    calculateDaily(
      sender: string,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { daily: BigNumber }>

    'calculateDaily(address,uint256)'(
      sender: string,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { daily: BigNumber }>

    calculateInterest(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        daily: BigNumber
        referral: BigNumber
        referrer: BigNumber
        requestTime: BigNumber
      }
    >

    'calculateInterest(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        daily: BigNumber
        referral: BigNumber
        referrer: BigNumber
        requestTime: BigNumber
      }
    >

    calculateLiquidityValue(
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        stts: BigNumber
        bnb: BigNumber
        total: BigNumber
      }
    >

    'calculateLiquidityValue(uint256)'(
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        stts: BigNumber
        bnb: BigNumber
        total: BigNumber
      }
    >

    calculatePercent(
      value: BigNumberish,
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { userValue: BigNumber; refValue: BigNumber }
    >

    'calculatePercent(uint256,uint256)'(
      value: BigNumberish,
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { userValue: BigNumber; refValue: BigNumber }
    >

    calculateRef(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'calculateRef(uint256)'(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    calculateReward(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'calculateReward(uint256)'(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    changeEndTime(
      end: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'changeEndTime(uint256)'(
      end: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    changeMax(
      percent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'changeMax(uint256)'(
      percent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    changeReferral(
      percent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'changeReferral(uint256)'(
      percent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    changeReward(
      percent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'changeReward(uint256)'(
      percent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    freeze(
      referrer: string,
      refPercent: BigNumberish,
      sttsAmount: BigNumberish,
      amountSTTSMin: BigNumberish,
      amountBNBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'freeze(address,uint256,uint256,uint256,uint256,uint256)'(
      referrer: string,
      refPercent: BigNumberish,
      sttsAmount: BigNumberish,
      amountSTTSMin: BigNumberish,
      amountBNBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    freezeInfo(
      stts: BigNumberish,
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        reward: BigNumber
        bnb: BigNumber
        minStts: BigNumber
        minBnb: BigNumber
        slippage: BigNumber
      }
    >

    'freezeInfo(uint256,uint256)'(
      stts: BigNumberish,
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        reward: BigNumber
        bnb: BigNumber
        minStts: BigNumber
        minBnb: BigNumber
        slippage: BigNumber
      }
    >

    freezeLP(
      referrer: string,
      refPercent: BigNumberish,
      lpAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'freezeLP(address,uint256,uint256)'(
      referrer: string,
      refPercent: BigNumberish,
      lpAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    lock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'lock()'(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    owner(overrides?: CallOverrides): Promise<[string]>

    'owner()'(overrides?: CallOverrides): Promise<[string]>

    preApprove(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'preApprove()'(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    removeBlackList(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'removeBlackList(address)'(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    sttsToBnbPrice(overrides?: CallOverrides): Promise<[BigNumber]>

    'sttsToBnbPrice()'(overrides?: CallOverrides): Promise<[BigNumber]>

    totalLiquidity(overrides?: CallOverrides): Promise<[BigNumber]>

    'totalLiquidity()'(overrides?: CallOverrides): Promise<[BigNumber]>

    unfreeze(
      amountSTTSMin: BigNumberish,
      amountBNBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'unfreeze(uint256,uint256,uint256)'(
      amountSTTSMin: BigNumberish,
      amountBNBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    unfreezeInfo(
      user: string,
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        stts: BigNumber
        bnb: BigNumber
        minStts: BigNumber
        minBnb: BigNumber
        slippage: BigNumber
      }
    >

    'unfreezeInfo(address,uint256)'(
      user: string,
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        stts: BigNumber
        bnb: BigNumber
        minStts: BigNumber
        minBnb: BigNumber
        slippage: BigNumber
      }
    >

    unfreezeLP(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'unfreezeLP()'(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    unlock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'unlock()'(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    updateFreeze(
      sttsAmount: BigNumberish,
      amountSTTSMin: BigNumberish,
      amountBNBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'updateFreeze(uint256,uint256,uint256,uint256)'(
      sttsAmount: BigNumberish,
      amountSTTSMin: BigNumberish,
      amountBNBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    updateFreezeLP(
      lpAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'updateFreezeLP(uint256)'(
      lpAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    userDepositDetails(
      user: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { startTime: BigNumber; reward: BigNumber }
    >

    'userDepositDetails(address,uint256)'(
      user: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { startTime: BigNumber; reward: BigNumber }
    >

    userDepositNumber(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'userDepositNumber(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    users(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        referrer: string
        refPercent: BigNumber
        refAmounts: BigNumber
        liquidity: BigNumber
        latestWithdraw: BigNumber
      }
    >

    'users(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        referrer: string
        refPercent: BigNumber
        refAmounts: BigNumber
        liquidity: BigNumber
        latestWithdraw: BigNumber
      }
    >

    withdrawInterest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'withdrawInterest()'(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>
  }

  END_TIME(overrides?: CallOverrides): Promise<BigNumber>

  'END_TIME()'(overrides?: CallOverrides): Promise<BigNumber>

  MAX_SLIPPAGE(overrides?: CallOverrides): Promise<BigNumber>

  'MAX_SLIPPAGE()'(overrides?: CallOverrides): Promise<BigNumber>

  REFERRAL(overrides?: CallOverrides): Promise<BigNumber>

  'REFERRAL()'(overrides?: CallOverrides): Promise<BigNumber>

  REWARD(overrides?: CallOverrides): Promise<BigNumber>

  'REWARD()'(overrides?: CallOverrides): Promise<BigNumber>

  addBlackList(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'addBlackList(address)'(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  blacklist(arg0: string, overrides?: CallOverrides): Promise<boolean>

  'blacklist(address)'(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>

  calculateBnb(
    stts: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'calculateBnb(uint256)'(
    stts: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  calculateDaily(
    sender: string,
    time: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'calculateDaily(address,uint256)'(
    sender: string,
    time: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  calculateInterest(
    user: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      daily: BigNumber
      referral: BigNumber
      referrer: BigNumber
      requestTime: BigNumber
    }
  >

  'calculateInterest(address)'(
    user: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      daily: BigNumber
      referral: BigNumber
      referrer: BigNumber
      requestTime: BigNumber
    }
  >

  calculateLiquidityValue(
    liquidity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      stts: BigNumber
      bnb: BigNumber
      total: BigNumber
    }
  >

  'calculateLiquidityValue(uint256)'(
    liquidity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      stts: BigNumber
      bnb: BigNumber
      total: BigNumber
    }
  >

  calculatePercent(
    value: BigNumberish,
    percent: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { userValue: BigNumber; refValue: BigNumber }
  >

  'calculatePercent(uint256,uint256)'(
    value: BigNumberish,
    percent: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { userValue: BigNumber; refValue: BigNumber }
  >

  calculateRef(
    value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'calculateRef(uint256)'(
    value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  calculateReward(
    value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'calculateReward(uint256)'(
    value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  changeEndTime(
    end: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'changeEndTime(uint256)'(
    end: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  changeMax(
    percent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'changeMax(uint256)'(
    percent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  changeReferral(
    percent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'changeReferral(uint256)'(
    percent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  changeReward(
    percent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'changeReward(uint256)'(
    percent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  freeze(
    referrer: string,
    refPercent: BigNumberish,
    sttsAmount: BigNumberish,
    amountSTTSMin: BigNumberish,
    amountBNBMin: BigNumberish,
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'freeze(address,uint256,uint256,uint256,uint256,uint256)'(
    referrer: string,
    refPercent: BigNumberish,
    sttsAmount: BigNumberish,
    amountSTTSMin: BigNumberish,
    amountBNBMin: BigNumberish,
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  freezeInfo(
    stts: BigNumberish,
    percent: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      reward: BigNumber
      bnb: BigNumber
      minStts: BigNumber
      minBnb: BigNumber
      slippage: BigNumber
    }
  >

  'freezeInfo(uint256,uint256)'(
    stts: BigNumberish,
    percent: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      reward: BigNumber
      bnb: BigNumber
      minStts: BigNumber
      minBnb: BigNumber
      slippage: BigNumber
    }
  >

  freezeLP(
    referrer: string,
    refPercent: BigNumberish,
    lpAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'freezeLP(address,uint256,uint256)'(
    referrer: string,
    refPercent: BigNumberish,
    lpAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  lock(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'lock()'(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  owner(overrides?: CallOverrides): Promise<string>

  'owner()'(overrides?: CallOverrides): Promise<string>

  preApprove(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'preApprove()'(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  removeBlackList(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'removeBlackList(address)'(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  sttsToBnbPrice(overrides?: CallOverrides): Promise<BigNumber>

  'sttsToBnbPrice()'(overrides?: CallOverrides): Promise<BigNumber>

  totalLiquidity(overrides?: CallOverrides): Promise<BigNumber>

  'totalLiquidity()'(overrides?: CallOverrides): Promise<BigNumber>

  unfreeze(
    amountSTTSMin: BigNumberish,
    amountBNBMin: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'unfreeze(uint256,uint256,uint256)'(
    amountSTTSMin: BigNumberish,
    amountBNBMin: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  unfreezeInfo(
    user: string,
    percent: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      stts: BigNumber
      bnb: BigNumber
      minStts: BigNumber
      minBnb: BigNumber
      slippage: BigNumber
    }
  >

  'unfreezeInfo(address,uint256)'(
    user: string,
    percent: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      stts: BigNumber
      bnb: BigNumber
      minStts: BigNumber
      minBnb: BigNumber
      slippage: BigNumber
    }
  >

  unfreezeLP(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'unfreezeLP()'(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  unlock(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'unlock()'(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  updateFreeze(
    sttsAmount: BigNumberish,
    amountSTTSMin: BigNumberish,
    amountBNBMin: BigNumberish,
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'updateFreeze(uint256,uint256,uint256,uint256)'(
    sttsAmount: BigNumberish,
    amountSTTSMin: BigNumberish,
    amountBNBMin: BigNumberish,
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  updateFreezeLP(
    lpAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'updateFreezeLP(uint256)'(
    lpAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  userDepositDetails(
    user: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { startTime: BigNumber; reward: BigNumber }
  >

  'userDepositDetails(address,uint256)'(
    user: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { startTime: BigNumber; reward: BigNumber }
  >

  userDepositNumber(user: string, overrides?: CallOverrides): Promise<BigNumber>

  'userDepositNumber(address)'(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  users(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      referrer: string
      refPercent: BigNumber
      refAmounts: BigNumber
      liquidity: BigNumber
      latestWithdraw: BigNumber
    }
  >

  'users(address)'(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      referrer: string
      refPercent: BigNumber
      refAmounts: BigNumber
      liquidity: BigNumber
      latestWithdraw: BigNumber
    }
  >

  withdrawInterest(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'withdrawInterest()'(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    END_TIME(overrides?: CallOverrides): Promise<BigNumber>

    'END_TIME()'(overrides?: CallOverrides): Promise<BigNumber>

    MAX_SLIPPAGE(overrides?: CallOverrides): Promise<BigNumber>

    'MAX_SLIPPAGE()'(overrides?: CallOverrides): Promise<BigNumber>

    REFERRAL(overrides?: CallOverrides): Promise<BigNumber>

    'REFERRAL()'(overrides?: CallOverrides): Promise<BigNumber>

    REWARD(overrides?: CallOverrides): Promise<BigNumber>

    'REWARD()'(overrides?: CallOverrides): Promise<BigNumber>

    addBlackList(user: string, overrides?: CallOverrides): Promise<void>

    'addBlackList(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<void>

    blacklist(arg0: string, overrides?: CallOverrides): Promise<boolean>

    'blacklist(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>

    calculateBnb(
      stts: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculateBnb(uint256)'(
      stts: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    calculateDaily(
      sender: string,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculateDaily(address,uint256)'(
      sender: string,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    calculateInterest(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        daily: BigNumber
        referral: BigNumber
        referrer: BigNumber
        requestTime: BigNumber
      }
    >

    'calculateInterest(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        daily: BigNumber
        referral: BigNumber
        referrer: BigNumber
        requestTime: BigNumber
      }
    >

    calculateLiquidityValue(
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        stts: BigNumber
        bnb: BigNumber
        total: BigNumber
      }
    >

    'calculateLiquidityValue(uint256)'(
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        stts: BigNumber
        bnb: BigNumber
        total: BigNumber
      }
    >

    calculatePercent(
      value: BigNumberish,
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { userValue: BigNumber; refValue: BigNumber }
    >

    'calculatePercent(uint256,uint256)'(
      value: BigNumberish,
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { userValue: BigNumber; refValue: BigNumber }
    >

    calculateRef(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculateRef(uint256)'(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    calculateReward(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculateReward(uint256)'(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    changeEndTime(end: BigNumberish, overrides?: CallOverrides): Promise<void>

    'changeEndTime(uint256)'(
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    changeMax(percent: BigNumberish, overrides?: CallOverrides): Promise<void>

    'changeMax(uint256)'(
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    changeReferral(
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'changeReferral(uint256)'(
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    changeReward(
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'changeReward(uint256)'(
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    freeze(
      referrer: string,
      refPercent: BigNumberish,
      sttsAmount: BigNumberish,
      amountSTTSMin: BigNumberish,
      amountBNBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'freeze(address,uint256,uint256,uint256,uint256,uint256)'(
      referrer: string,
      refPercent: BigNumberish,
      sttsAmount: BigNumberish,
      amountSTTSMin: BigNumberish,
      amountBNBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    freezeInfo(
      stts: BigNumberish,
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        reward: BigNumber
        bnb: BigNumber
        minStts: BigNumber
        minBnb: BigNumber
        slippage: BigNumber
      }
    >

    'freezeInfo(uint256,uint256)'(
      stts: BigNumberish,
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        reward: BigNumber
        bnb: BigNumber
        minStts: BigNumber
        minBnb: BigNumber
        slippage: BigNumber
      }
    >

    freezeLP(
      referrer: string,
      refPercent: BigNumberish,
      lpAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'freezeLP(address,uint256,uint256)'(
      referrer: string,
      refPercent: BigNumberish,
      lpAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    lock(overrides?: CallOverrides): Promise<void>

    'lock()'(overrides?: CallOverrides): Promise<void>

    owner(overrides?: CallOverrides): Promise<string>

    'owner()'(overrides?: CallOverrides): Promise<string>

    preApprove(overrides?: CallOverrides): Promise<void>

    'preApprove()'(overrides?: CallOverrides): Promise<void>

    removeBlackList(user: string, overrides?: CallOverrides): Promise<void>

    'removeBlackList(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<void>

    sttsToBnbPrice(overrides?: CallOverrides): Promise<BigNumber>

    'sttsToBnbPrice()'(overrides?: CallOverrides): Promise<BigNumber>

    totalLiquidity(overrides?: CallOverrides): Promise<BigNumber>

    'totalLiquidity()'(overrides?: CallOverrides): Promise<BigNumber>

    unfreeze(
      amountSTTSMin: BigNumberish,
      amountBNBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'unfreeze(uint256,uint256,uint256)'(
      amountSTTSMin: BigNumberish,
      amountBNBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    unfreezeInfo(
      user: string,
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        stts: BigNumber
        bnb: BigNumber
        minStts: BigNumber
        minBnb: BigNumber
        slippage: BigNumber
      }
    >

    'unfreezeInfo(address,uint256)'(
      user: string,
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        stts: BigNumber
        bnb: BigNumber
        minStts: BigNumber
        minBnb: BigNumber
        slippage: BigNumber
      }
    >

    unfreezeLP(overrides?: CallOverrides): Promise<void>

    'unfreezeLP()'(overrides?: CallOverrides): Promise<void>

    unlock(overrides?: CallOverrides): Promise<void>

    'unlock()'(overrides?: CallOverrides): Promise<void>

    updateFreeze(
      sttsAmount: BigNumberish,
      amountSTTSMin: BigNumberish,
      amountBNBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'updateFreeze(uint256,uint256,uint256,uint256)'(
      sttsAmount: BigNumberish,
      amountSTTSMin: BigNumberish,
      amountBNBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    updateFreezeLP(
      lpAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    'updateFreezeLP(uint256)'(
      lpAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    userDepositDetails(
      user: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { startTime: BigNumber; reward: BigNumber }
    >

    'userDepositDetails(address,uint256)'(
      user: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { startTime: BigNumber; reward: BigNumber }
    >

    userDepositNumber(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'userDepositNumber(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    users(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        referrer: string
        refPercent: BigNumber
        refAmounts: BigNumber
        liquidity: BigNumber
        latestWithdraw: BigNumber
      }
    >

    'users(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        referrer: string
        refPercent: BigNumber
        refAmounts: BigNumber
        liquidity: BigNumber
        latestWithdraw: BigNumber
      }
    >

    withdrawInterest(overrides?: CallOverrides): Promise<boolean>

    'withdrawInterest()'(overrides?: CallOverrides): Promise<boolean>
  }

  filters: {
    AddedBlackList(user: null): TypedEventFilter<[string], { user: string }>

    Freeze(
      user: string | null,
      referrer: string | null,
      amount: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; referrer: string; amount: BigNumber }
    >

    FreezeLP(
      user: string | null,
      referrer: string | null,
      amount: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; referrer: string; amount: BigNumber }
    >

    PaymentRecived(
      user: string | null,
      value: null
    ): TypedEventFilter<[string, BigNumber], { user: string; value: BigNumber }>

    RemovedBlackList(user: null): TypedEventFilter<[string], { user: string }>

    Unfreeze(
      user: string | null,
      sttsAmount: null,
      bnbAmount: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; sttsAmount: BigNumber; bnbAmount: BigNumber }
    >

    UnfreezeLP(
      user: string | null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >

    UpdateFreeze(
      user: string | null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >

    UpdateFreezeLP(
      user: string | null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >

    WithdrawInterest(
      user: string | null,
      daily: null,
      referrals: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; daily: BigNumber; referrals: BigNumber }
    >
  }

  estimateGas: {
    END_TIME(overrides?: CallOverrides): Promise<BigNumber>

    'END_TIME()'(overrides?: CallOverrides): Promise<BigNumber>

    MAX_SLIPPAGE(overrides?: CallOverrides): Promise<BigNumber>

    'MAX_SLIPPAGE()'(overrides?: CallOverrides): Promise<BigNumber>

    REFERRAL(overrides?: CallOverrides): Promise<BigNumber>

    'REFERRAL()'(overrides?: CallOverrides): Promise<BigNumber>

    REWARD(overrides?: CallOverrides): Promise<BigNumber>

    'REWARD()'(overrides?: CallOverrides): Promise<BigNumber>

    addBlackList(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'addBlackList(address)'(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    blacklist(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    'blacklist(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    calculateBnb(
      stts: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculateBnb(uint256)'(
      stts: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    calculateDaily(
      sender: string,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculateDaily(address,uint256)'(
      sender: string,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    calculateInterest(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculateInterest(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    calculateLiquidityValue(
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculateLiquidityValue(uint256)'(
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    calculatePercent(
      value: BigNumberish,
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculatePercent(uint256,uint256)'(
      value: BigNumberish,
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    calculateRef(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculateRef(uint256)'(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    calculateReward(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'calculateReward(uint256)'(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    changeEndTime(
      end: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'changeEndTime(uint256)'(
      end: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    changeMax(
      percent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'changeMax(uint256)'(
      percent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    changeReferral(
      percent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'changeReferral(uint256)'(
      percent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    changeReward(
      percent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'changeReward(uint256)'(
      percent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    freeze(
      referrer: string,
      refPercent: BigNumberish,
      sttsAmount: BigNumberish,
      amountSTTSMin: BigNumberish,
      amountBNBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'freeze(address,uint256,uint256,uint256,uint256,uint256)'(
      referrer: string,
      refPercent: BigNumberish,
      sttsAmount: BigNumberish,
      amountSTTSMin: BigNumberish,
      amountBNBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    freezeInfo(
      stts: BigNumberish,
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'freezeInfo(uint256,uint256)'(
      stts: BigNumberish,
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    freezeLP(
      referrer: string,
      refPercent: BigNumberish,
      lpAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'freezeLP(address,uint256,uint256)'(
      referrer: string,
      refPercent: BigNumberish,
      lpAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    lock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'lock()'(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>

    preApprove(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'preApprove()'(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    removeBlackList(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'removeBlackList(address)'(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    sttsToBnbPrice(overrides?: CallOverrides): Promise<BigNumber>

    'sttsToBnbPrice()'(overrides?: CallOverrides): Promise<BigNumber>

    totalLiquidity(overrides?: CallOverrides): Promise<BigNumber>

    'totalLiquidity()'(overrides?: CallOverrides): Promise<BigNumber>

    unfreeze(
      amountSTTSMin: BigNumberish,
      amountBNBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'unfreeze(uint256,uint256,uint256)'(
      amountSTTSMin: BigNumberish,
      amountBNBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    unfreezeInfo(
      user: string,
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'unfreezeInfo(address,uint256)'(
      user: string,
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    unfreezeLP(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'unfreezeLP()'(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    unlock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'unlock()'(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    updateFreeze(
      sttsAmount: BigNumberish,
      amountSTTSMin: BigNumberish,
      amountBNBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'updateFreeze(uint256,uint256,uint256,uint256)'(
      sttsAmount: BigNumberish,
      amountSTTSMin: BigNumberish,
      amountBNBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    updateFreezeLP(
      lpAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'updateFreezeLP(uint256)'(
      lpAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    userDepositDetails(
      user: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'userDepositDetails(address,uint256)'(
      user: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    userDepositNumber(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'userDepositNumber(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    users(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    'users(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    withdrawInterest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'withdrawInterest()'(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    END_TIME(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'END_TIME()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    MAX_SLIPPAGE(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'MAX_SLIPPAGE()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    REFERRAL(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'REFERRAL()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    REWARD(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'REWARD()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    addBlackList(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'addBlackList(address)'(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    blacklist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'blacklist(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    calculateBnb(
      stts: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'calculateBnb(uint256)'(
      stts: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    calculateDaily(
      sender: string,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'calculateDaily(address,uint256)'(
      sender: string,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    calculateInterest(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'calculateInterest(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    calculateLiquidityValue(
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'calculateLiquidityValue(uint256)'(
      liquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    calculatePercent(
      value: BigNumberish,
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'calculatePercent(uint256,uint256)'(
      value: BigNumberish,
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    calculateRef(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'calculateRef(uint256)'(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    calculateReward(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'calculateReward(uint256)'(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    changeEndTime(
      end: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'changeEndTime(uint256)'(
      end: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    changeMax(
      percent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'changeMax(uint256)'(
      percent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    changeReferral(
      percent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'changeReferral(uint256)'(
      percent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    changeReward(
      percent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'changeReward(uint256)'(
      percent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    freeze(
      referrer: string,
      refPercent: BigNumberish,
      sttsAmount: BigNumberish,
      amountSTTSMin: BigNumberish,
      amountBNBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'freeze(address,uint256,uint256,uint256,uint256,uint256)'(
      referrer: string,
      refPercent: BigNumberish,
      sttsAmount: BigNumberish,
      amountSTTSMin: BigNumberish,
      amountBNBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    freezeInfo(
      stts: BigNumberish,
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'freezeInfo(uint256,uint256)'(
      stts: BigNumberish,
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    freezeLP(
      referrer: string,
      refPercent: BigNumberish,
      lpAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'freezeLP(address,uint256,uint256)'(
      referrer: string,
      refPercent: BigNumberish,
      lpAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    lock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'lock()'(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    preApprove(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'preApprove()'(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    removeBlackList(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'removeBlackList(address)'(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    sttsToBnbPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'sttsToBnbPrice()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalLiquidity(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'totalLiquidity()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    unfreeze(
      amountSTTSMin: BigNumberish,
      amountBNBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'unfreeze(uint256,uint256,uint256)'(
      amountSTTSMin: BigNumberish,
      amountBNBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    unfreezeInfo(
      user: string,
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'unfreezeInfo(address,uint256)'(
      user: string,
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    unfreezeLP(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'unfreezeLP()'(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    unlock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'unlock()'(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    updateFreeze(
      sttsAmount: BigNumberish,
      amountSTTSMin: BigNumberish,
      amountBNBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'updateFreeze(uint256,uint256,uint256,uint256)'(
      sttsAmount: BigNumberish,
      amountSTTSMin: BigNumberish,
      amountBNBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    updateFreezeLP(
      lpAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'updateFreezeLP(uint256)'(
      lpAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    userDepositDetails(
      user: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'userDepositDetails(address,uint256)'(
      user: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    userDepositNumber(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'userDepositNumber(address)'(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    users(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'users(address)'(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    withdrawInterest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'withdrawInterest()'(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>
  }
}
