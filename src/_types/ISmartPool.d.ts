/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ISmartPoolInterface extends ethers.utils.Interface {
  functions: {
    "calculateInterest(address)": FunctionFragment;
    "calulateBnb(uint256)": FunctionFragment;
    "freeze(address,uint256,uint256,uint256)": FunctionFragment;
    "freezePrice()": FunctionFragment;
    "freezePriceInfo(address,uint256)": FunctionFragment;
    "maxStts()": FunctionFragment;
    "priceInfo(uint256,uint256)": FunctionFragment;
    "unfreeze(uint256,uint256,uint256)": FunctionFragment;
    "updateFreeze(uint256,uint256,uint256)": FunctionFragment;
    "updatePrice(address)": FunctionFragment;
    "userCompletedLevel(address)": FunctionFragment;
    "userDepositNumber(address)": FunctionFragment;
    "userDepositTime(address)": FunctionFragment;
    "userDepositTimer(address,uint256)": FunctionFragment;
    "userExpireTime(address)": FunctionFragment;
    "userExpired(address)": FunctionFragment;
    "userReferralList(address)": FunctionFragment;
    "userReferrals(address)": FunctionFragment;
    "withdrawInterest()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calculateInterest",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "calulateBnb",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "freeze",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "freezePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "freezePriceInfo",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "maxStts", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceInfo",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unfreeze",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFreeze",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "updatePrice", values: [string]): string;
  encodeFunctionData(
    functionFragment: "userCompletedLevel",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userDepositNumber",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userDepositTime",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userDepositTimer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userExpireTime",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "userExpired", values: [string]): string;
  encodeFunctionData(
    functionFragment: "userReferralList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userReferrals",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawInterest",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calulateBnb",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "freeze", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "freezePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freezePriceInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxStts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unfreeze", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateFreeze",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userCompletedLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userDepositNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userDepositTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userDepositTimer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userExpireTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userExpired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userReferralList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userReferrals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawInterest",
    data: BytesLike
  ): Result;

  events: {
    "Freeze(address,address,uint256)": EventFragment;
    "Unfreeze(address,uint256,uint256)": EventFragment;
    "UpdateFreeze(address,uint256)": EventFragment;
    "WithdrawInterest(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Freeze"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unfreeze"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateFreeze"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawInterest"): EventFragment;
}

export class ISmartPool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ISmartPoolInterface;

  functions: {
    calculateInterest(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        daily: BigNumber;
        referral: BigNumber;
        requestTime: BigNumber;
      }
    >;

    "calculateInterest(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        daily: BigNumber;
        referral: BigNumber;
        requestTime: BigNumber;
      }
    >;

    calulateBnb(
      stts: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { bnb: BigNumber }>;

    "calulateBnb(uint256)"(
      stts: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { bnb: BigNumber }>;

    freeze(
      referrer: string,
      amountSTTSMin: BigNumberish,
      amountBNBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "freeze(address,uint256,uint256,uint256)"(
      referrer: string,
      amountSTTSMin: BigNumberish,
      amountBNBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    freezePrice(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { stts: BigNumber; bnb: BigNumber }>;

    "freezePrice()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { stts: BigNumber; bnb: BigNumber }>;

    freezePriceInfo(
      user: string,
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        stts: BigNumber;
        bnb: BigNumber;
        minStts: BigNumber;
        minBnb: BigNumber;
        slippage: BigNumber;
      }
    >;

    "freezePriceInfo(address,uint256)"(
      user: string,
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        stts: BigNumber;
        bnb: BigNumber;
        minStts: BigNumber;
        minBnb: BigNumber;
        slippage: BigNumber;
      }
    >;

    maxStts(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { stts: BigNumber }>;

    "maxStts()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { stts: BigNumber }>;

    priceInfo(
      stts: BigNumberish,
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        bnb: BigNumber;
        minStts: BigNumber;
        minBnb: BigNumber;
        slippage: BigNumber;
      }
    >;

    "priceInfo(uint256,uint256)"(
      stts: BigNumberish,
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        bnb: BigNumber;
        minStts: BigNumber;
        minBnb: BigNumber;
        slippage: BigNumber;
      }
    >;

    unfreeze(
      amountSTTSMin: BigNumberish,
      amountBNBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "unfreeze(uint256,uint256,uint256)"(
      amountSTTSMin: BigNumberish,
      amountBNBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateFreeze(
      amountSTTSMin: BigNumberish,
      amountBNBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateFreeze(uint256,uint256,uint256)"(
      amountSTTSMin: BigNumberish,
      amountBNBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePrice(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { stts: BigNumber; bnb: BigNumber }>;

    "updatePrice(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { stts: BigNumber; bnb: BigNumber }>;

    userCompletedLevel(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[number] & { level: number }>;

    "userCompletedLevel(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<[number] & { level: number }>;

    userDepositNumber(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "userDepositNumber(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userDepositTime(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    "userDepositTime(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    userDepositTimer(
      user: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "userDepositTimer(address,uint256)"(
      user: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userExpireTime(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "userExpireTime(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userExpired(user: string, overrides?: CallOverrides): Promise<[boolean]>;

    "userExpired(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    userReferralList(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number
        ]
      ]
    >;

    "userReferralList(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number
        ]
      ]
    >;

    userReferrals(user: string, overrides?: CallOverrides): Promise<[string[]]>;

    "userReferrals(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    withdrawInterest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawInterest()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  calculateInterest(
    user: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      daily: BigNumber;
      referral: BigNumber;
      requestTime: BigNumber;
    }
  >;

  "calculateInterest(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      daily: BigNumber;
      referral: BigNumber;
      requestTime: BigNumber;
    }
  >;

  calulateBnb(
    stts: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calulateBnb(uint256)"(
    stts: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  freeze(
    referrer: string,
    amountSTTSMin: BigNumberish,
    amountBNBMin: BigNumberish,
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "freeze(address,uint256,uint256,uint256)"(
    referrer: string,
    amountSTTSMin: BigNumberish,
    amountBNBMin: BigNumberish,
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  freezePrice(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { stts: BigNumber; bnb: BigNumber }>;

  "freezePrice()"(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { stts: BigNumber; bnb: BigNumber }>;

  freezePriceInfo(
    user: string,
    percent: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      stts: BigNumber;
      bnb: BigNumber;
      minStts: BigNumber;
      minBnb: BigNumber;
      slippage: BigNumber;
    }
  >;

  "freezePriceInfo(address,uint256)"(
    user: string,
    percent: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      stts: BigNumber;
      bnb: BigNumber;
      minStts: BigNumber;
      minBnb: BigNumber;
      slippage: BigNumber;
    }
  >;

  maxStts(overrides?: CallOverrides): Promise<BigNumber>;

  "maxStts()"(overrides?: CallOverrides): Promise<BigNumber>;

  priceInfo(
    stts: BigNumberish,
    percent: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      bnb: BigNumber;
      minStts: BigNumber;
      minBnb: BigNumber;
      slippage: BigNumber;
    }
  >;

  "priceInfo(uint256,uint256)"(
    stts: BigNumberish,
    percent: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      bnb: BigNumber;
      minStts: BigNumber;
      minBnb: BigNumber;
      slippage: BigNumber;
    }
  >;

  unfreeze(
    amountSTTSMin: BigNumberish,
    amountBNBMin: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "unfreeze(uint256,uint256,uint256)"(
    amountSTTSMin: BigNumberish,
    amountBNBMin: BigNumberish,
    deadline: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateFreeze(
    amountSTTSMin: BigNumberish,
    amountBNBMin: BigNumberish,
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateFreeze(uint256,uint256,uint256)"(
    amountSTTSMin: BigNumberish,
    amountBNBMin: BigNumberish,
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePrice(
    user: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { stts: BigNumber; bnb: BigNumber }>;

  "updatePrice(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { stts: BigNumber; bnb: BigNumber }>;

  userCompletedLevel(_user: string, overrides?: CallOverrides): Promise<number>;

  "userCompletedLevel(address)"(
    _user: string,
    overrides?: CallOverrides
  ): Promise<number>;

  userDepositNumber(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "userDepositNumber(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userDepositTime(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "userDepositTime(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  userDepositTimer(
    user: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "userDepositTimer(address,uint256)"(
    user: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userExpireTime(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  "userExpireTime(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userExpired(user: string, overrides?: CallOverrides): Promise<boolean>;

  "userExpired(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  userReferralList(
    user: string,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number
    ]
  >;

  "userReferralList(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      number
    ]
  >;

  userReferrals(user: string, overrides?: CallOverrides): Promise<string[]>;

  "userReferrals(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  withdrawInterest(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawInterest()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    calculateInterest(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        daily: BigNumber;
        referral: BigNumber;
        requestTime: BigNumber;
      }
    >;

    "calculateInterest(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        daily: BigNumber;
        referral: BigNumber;
        requestTime: BigNumber;
      }
    >;

    calulateBnb(
      stts: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calulateBnb(uint256)"(
      stts: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    freeze(
      referrer: string,
      amountSTTSMin: BigNumberish,
      amountBNBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "freeze(address,uint256,uint256,uint256)"(
      referrer: string,
      amountSTTSMin: BigNumberish,
      amountBNBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    freezePrice(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { stts: BigNumber; bnb: BigNumber }>;

    "freezePrice()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { stts: BigNumber; bnb: BigNumber }>;

    freezePriceInfo(
      user: string,
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        stts: BigNumber;
        bnb: BigNumber;
        minStts: BigNumber;
        minBnb: BigNumber;
        slippage: BigNumber;
      }
    >;

    "freezePriceInfo(address,uint256)"(
      user: string,
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        stts: BigNumber;
        bnb: BigNumber;
        minStts: BigNumber;
        minBnb: BigNumber;
        slippage: BigNumber;
      }
    >;

    maxStts(overrides?: CallOverrides): Promise<BigNumber>;

    "maxStts()"(overrides?: CallOverrides): Promise<BigNumber>;

    priceInfo(
      stts: BigNumberish,
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        bnb: BigNumber;
        minStts: BigNumber;
        minBnb: BigNumber;
        slippage: BigNumber;
      }
    >;

    "priceInfo(uint256,uint256)"(
      stts: BigNumberish,
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        bnb: BigNumber;
        minStts: BigNumber;
        minBnb: BigNumber;
        slippage: BigNumber;
      }
    >;

    unfreeze(
      amountSTTSMin: BigNumberish,
      amountBNBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "unfreeze(uint256,uint256,uint256)"(
      amountSTTSMin: BigNumberish,
      amountBNBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFreeze(
      amountSTTSMin: BigNumberish,
      amountBNBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateFreeze(uint256,uint256,uint256)"(
      amountSTTSMin: BigNumberish,
      amountBNBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePrice(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { stts: BigNumber; bnb: BigNumber }>;

    "updatePrice(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { stts: BigNumber; bnb: BigNumber }>;

    userCompletedLevel(
      _user: string,
      overrides?: CallOverrides
    ): Promise<number>;

    "userCompletedLevel(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<number>;

    userDepositNumber(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userDepositNumber(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userDepositTime(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "userDepositTime(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    userDepositTimer(
      user: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userDepositTimer(address,uint256)"(
      user: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userExpireTime(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "userExpireTime(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userExpired(user: string, overrides?: CallOverrides): Promise<boolean>;

    "userExpired(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    userReferralList(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number
      ]
    >;

    "userReferralList(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number
      ]
    >;

    userReferrals(user: string, overrides?: CallOverrides): Promise<string[]>;

    "userReferrals(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    withdrawInterest(overrides?: CallOverrides): Promise<boolean>;

    "withdrawInterest()"(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    Freeze(
      user: string | null,
      referrer: string | null,
      amount: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; referrer: string; amount: BigNumber }
    >;

    Unfreeze(
      user: string | null,
      sttsAmount: null,
      bnbAmount: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; sttsAmount: BigNumber; bnbAmount: BigNumber }
    >;

    UpdateFreeze(
      user: string | null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    WithdrawInterest(
      user: string | null,
      daily: null,
      referrals: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; daily: BigNumber; referrals: BigNumber }
    >;
  };

  estimateGas: {
    calculateInterest(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateInterest(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calulateBnb(
      stts: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calulateBnb(uint256)"(
      stts: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    freeze(
      referrer: string,
      amountSTTSMin: BigNumberish,
      amountBNBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "freeze(address,uint256,uint256,uint256)"(
      referrer: string,
      amountSTTSMin: BigNumberish,
      amountBNBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    freezePrice(overrides?: CallOverrides): Promise<BigNumber>;

    "freezePrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    freezePriceInfo(
      user: string,
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "freezePriceInfo(address,uint256)"(
      user: string,
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxStts(overrides?: CallOverrides): Promise<BigNumber>;

    "maxStts()"(overrides?: CallOverrides): Promise<BigNumber>;

    priceInfo(
      stts: BigNumberish,
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "priceInfo(uint256,uint256)"(
      stts: BigNumberish,
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unfreeze(
      amountSTTSMin: BigNumberish,
      amountBNBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "unfreeze(uint256,uint256,uint256)"(
      amountSTTSMin: BigNumberish,
      amountBNBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateFreeze(
      amountSTTSMin: BigNumberish,
      amountBNBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateFreeze(uint256,uint256,uint256)"(
      amountSTTSMin: BigNumberish,
      amountBNBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePrice(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "updatePrice(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userCompletedLevel(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userCompletedLevel(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userDepositNumber(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userDepositNumber(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userDepositTime(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userDepositTime(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userDepositTimer(
      user: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userDepositTimer(address,uint256)"(
      user: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userExpireTime(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "userExpireTime(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userExpired(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "userExpired(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userReferralList(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userReferralList(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userReferrals(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "userReferrals(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawInterest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawInterest()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateInterest(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateInterest(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calulateBnb(
      stts: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calulateBnb(uint256)"(
      stts: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    freeze(
      referrer: string,
      amountSTTSMin: BigNumberish,
      amountBNBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "freeze(address,uint256,uint256,uint256)"(
      referrer: string,
      amountSTTSMin: BigNumberish,
      amountBNBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    freezePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "freezePrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    freezePriceInfo(
      user: string,
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "freezePriceInfo(address,uint256)"(
      user: string,
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxStts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxStts()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceInfo(
      stts: BigNumberish,
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "priceInfo(uint256,uint256)"(
      stts: BigNumberish,
      percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unfreeze(
      amountSTTSMin: BigNumberish,
      amountBNBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "unfreeze(uint256,uint256,uint256)"(
      amountSTTSMin: BigNumberish,
      amountBNBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateFreeze(
      amountSTTSMin: BigNumberish,
      amountBNBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateFreeze(uint256,uint256,uint256)"(
      amountSTTSMin: BigNumberish,
      amountBNBMin: BigNumberish,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePrice(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "updatePrice(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userCompletedLevel(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userCompletedLevel(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userDepositNumber(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userDepositNumber(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userDepositTime(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userDepositTime(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userDepositTimer(
      user: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userDepositTimer(address,uint256)"(
      user: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userExpireTime(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userExpireTime(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userExpired(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userExpired(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userReferralList(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userReferralList(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userReferrals(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userReferrals(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawInterest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawInterest()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
