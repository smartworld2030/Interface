/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import { TypedEventFilter, TypedEvent, TypedListener } from './commons'

interface ISmartWorldInterface extends ethers.utils.Interface {
  functions: {
    'activation(address,uint256)': FunctionFragment
    'bnbToSatoshi(uint256)': FunctionFragment
    'btcToBnbPrice()': FunctionFragment
    'btcToSatoshi(uint256)': FunctionFragment
    'burnWithStt(address,uint256)': FunctionFragment
    'deposit(address,uint256)': FunctionFragment
    'depositToken(address,address,uint256)': FunctionFragment
    'payWithStt(address,uint256)': FunctionFragment
    'sttPrice()': FunctionFragment
    'sttsToBnb(uint256)': FunctionFragment
    'sttsToBnbPrice()': FunctionFragment
    'sttsToSatoshi(uint256)': FunctionFragment
    'totalBalances()': FunctionFragment
    'totalSatoshi()': FunctionFragment
    'userBalances(address,address)': FunctionFragment
    'userTokens(address,address,address)': FunctionFragment
    'withdraw(address,uint256)': FunctionFragment
    'withdrawToken(address,address,uint256)': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'activation',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'bnbToSatoshi',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'btcToBnbPrice',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'btcToSatoshi',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'burnWithStt',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'deposit',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'depositToken',
    values: [string, string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'payWithStt',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'sttPrice', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'sttsToBnb',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'sttsToBnbPrice',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'sttsToSatoshi',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'totalBalances',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'totalSatoshi',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'userBalances',
    values: [string, string]
  ): string
  encodeFunctionData(
    functionFragment: 'userTokens',
    values: [string, string, string]
  ): string
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'withdrawToken',
    values: [string, string, BigNumberish]
  ): string

  decodeFunctionResult(functionFragment: 'activation', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'bnbToSatoshi',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'btcToBnbPrice',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'btcToSatoshi',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'burnWithStt', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'depositToken',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'payWithStt', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'sttPrice', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'sttsToBnb', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'sttsToBnbPrice',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'sttsToSatoshi',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'totalBalances',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'totalSatoshi',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'userBalances',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'userTokens', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'withdrawToken',
    data: BytesLike
  ): Result

  events: {
    'Activated(address,address)': EventFragment
    'Deposit(address,address,uint256,uint256)': EventFragment
    'DepositToken(address,address,address,uint256)': EventFragment
    'Withdraw(address,address,uint256)': EventFragment
    'WithdrawToken(address,address,address,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'Activated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'DepositToken'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'WithdrawToken'): EventFragment
}

export class ISmartWorld extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: ISmartWorldInterface

  functions: {
    activation(
      sender_: string,
      airDrop_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'activation(address,uint256)'(
      sender_: string,
      airDrop_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    bnbToSatoshi(
      value_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'bnbToSatoshi(uint256)'(
      value_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    btcToBnbPrice(overrides?: CallOverrides): Promise<[BigNumber]>

    'btcToBnbPrice()'(overrides?: CallOverrides): Promise<[BigNumber]>

    btcToSatoshi(
      value_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'btcToSatoshi(uint256)'(
      value_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    burnWithStt(
      from_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'burnWithStt(address,uint256)'(
      from_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    deposit(
      sender_: string,
      value_: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'deposit(address,uint256)'(
      sender_: string,
      value_: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    depositToken(
      token_: string,
      spender_: string,
      value_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'depositToken(address,address,uint256)'(
      token_: string,
      spender_: string,
      value_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    payWithStt(
      reciever_: string,
      interest_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'payWithStt(address,uint256)'(
      reciever_: string,
      interest_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    sttPrice(overrides?: CallOverrides): Promise<[BigNumber]>

    'sttPrice()'(overrides?: CallOverrides): Promise<[BigNumber]>

    sttsToBnb(
      value_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'sttsToBnb(uint256)'(
      value_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    sttsToBnbPrice(overrides?: CallOverrides): Promise<[BigNumber]>

    'sttsToBnbPrice()'(overrides?: CallOverrides): Promise<[BigNumber]>

    sttsToSatoshi(
      value_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'sttsToSatoshi(uint256)'(
      value_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    totalBalances(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        stts: BigNumber
        btc: BigNumber
        bnb: BigNumber
      }
    >

    'totalBalances()'(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        stts: BigNumber
        btc: BigNumber
        bnb: BigNumber
      }
    >

    totalSatoshi(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        stts: BigNumber
        btc: BigNumber
        bnb: BigNumber
      }
    >

    'totalSatoshi()'(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        stts: BigNumber
        btc: BigNumber
        bnb: BigNumber
      }
    >

    userBalances(
      user_: string,
      contract_: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        isActive: boolean
        bnb: BigNumber
        satoshi: BigNumber
      }
    >

    'userBalances(address,address)'(
      user_: string,
      contract_: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        isActive: boolean
        bnb: BigNumber
        satoshi: BigNumber
      }
    >

    userTokens(
      token: string,
      user_: string,
      contract_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    'userTokens(address,address,address)'(
      token: string,
      user_: string,
      contract_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    withdraw(
      reciever_: string,
      interest_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'withdraw(address,uint256)'(
      reciever_: string,
      interest_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    withdrawToken(
      token_: string,
      reciever_: string,
      interest_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    'withdrawToken(address,address,uint256)'(
      token_: string,
      reciever_: string,
      interest_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>
  }

  activation(
    sender_: string,
    airDrop_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'activation(address,uint256)'(
    sender_: string,
    airDrop_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  bnbToSatoshi(
    value_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'bnbToSatoshi(uint256)'(
    value_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  btcToBnbPrice(overrides?: CallOverrides): Promise<BigNumber>

  'btcToBnbPrice()'(overrides?: CallOverrides): Promise<BigNumber>

  btcToSatoshi(
    value_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'btcToSatoshi(uint256)'(
    value_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  burnWithStt(
    from_: string,
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'burnWithStt(address,uint256)'(
    from_: string,
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  deposit(
    sender_: string,
    value_: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'deposit(address,uint256)'(
    sender_: string,
    value_: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  depositToken(
    token_: string,
    spender_: string,
    value_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'depositToken(address,address,uint256)'(
    token_: string,
    spender_: string,
    value_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  payWithStt(
    reciever_: string,
    interest_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'payWithStt(address,uint256)'(
    reciever_: string,
    interest_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  sttPrice(overrides?: CallOverrides): Promise<BigNumber>

  'sttPrice()'(overrides?: CallOverrides): Promise<BigNumber>

  sttsToBnb(value_: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  'sttsToBnb(uint256)'(
    value_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  sttsToBnbPrice(overrides?: CallOverrides): Promise<BigNumber>

  'sttsToBnbPrice()'(overrides?: CallOverrides): Promise<BigNumber>

  sttsToSatoshi(
    value_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'sttsToSatoshi(uint256)'(
    value_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  totalBalances(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      stts: BigNumber
      btc: BigNumber
      bnb: BigNumber
    }
  >

  'totalBalances()'(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      stts: BigNumber
      btc: BigNumber
      bnb: BigNumber
    }
  >

  totalSatoshi(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      stts: BigNumber
      btc: BigNumber
      bnb: BigNumber
    }
  >

  'totalSatoshi()'(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      stts: BigNumber
      btc: BigNumber
      bnb: BigNumber
    }
  >

  userBalances(
    user_: string,
    contract_: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber] & {
      isActive: boolean
      bnb: BigNumber
      satoshi: BigNumber
    }
  >

  'userBalances(address,address)'(
    user_: string,
    contract_: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber] & {
      isActive: boolean
      bnb: BigNumber
      satoshi: BigNumber
    }
  >

  userTokens(
    token: string,
    user_: string,
    contract_: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  'userTokens(address,address,address)'(
    token: string,
    user_: string,
    contract_: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  withdraw(
    reciever_: string,
    interest_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'withdraw(address,uint256)'(
    reciever_: string,
    interest_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  withdrawToken(
    token_: string,
    reciever_: string,
    interest_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  'withdrawToken(address,address,uint256)'(
    token_: string,
    reciever_: string,
    interest_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    activation(
      sender_: string,
      airDrop_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'activation(address,uint256)'(
      sender_: string,
      airDrop_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    bnbToSatoshi(
      value_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'bnbToSatoshi(uint256)'(
      value_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    btcToBnbPrice(overrides?: CallOverrides): Promise<BigNumber>

    'btcToBnbPrice()'(overrides?: CallOverrides): Promise<BigNumber>

    btcToSatoshi(
      value_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'btcToSatoshi(uint256)'(
      value_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    burnWithStt(
      from_: string,
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'burnWithStt(address,uint256)'(
      from_: string,
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    deposit(
      sender_: string,
      value_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'deposit(address,uint256)'(
      sender_: string,
      value_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    depositToken(
      token_: string,
      spender_: string,
      value_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'depositToken(address,address,uint256)'(
      token_: string,
      spender_: string,
      value_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    payWithStt(
      reciever_: string,
      interest_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'payWithStt(address,uint256)'(
      reciever_: string,
      interest_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    sttPrice(overrides?: CallOverrides): Promise<BigNumber>

    'sttPrice()'(overrides?: CallOverrides): Promise<BigNumber>

    sttsToBnb(
      value_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'sttsToBnb(uint256)'(
      value_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    sttsToBnbPrice(overrides?: CallOverrides): Promise<BigNumber>

    'sttsToBnbPrice()'(overrides?: CallOverrides): Promise<BigNumber>

    sttsToSatoshi(
      value_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'sttsToSatoshi(uint256)'(
      value_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    totalBalances(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        stts: BigNumber
        btc: BigNumber
        bnb: BigNumber
      }
    >

    'totalBalances()'(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        stts: BigNumber
        btc: BigNumber
        bnb: BigNumber
      }
    >

    totalSatoshi(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        stts: BigNumber
        btc: BigNumber
        bnb: BigNumber
      }
    >

    'totalSatoshi()'(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        stts: BigNumber
        btc: BigNumber
        bnb: BigNumber
      }
    >

    userBalances(
      user_: string,
      contract_: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        isActive: boolean
        bnb: BigNumber
        satoshi: BigNumber
      }
    >

    'userBalances(address,address)'(
      user_: string,
      contract_: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        isActive: boolean
        bnb: BigNumber
        satoshi: BigNumber
      }
    >

    userTokens(
      token: string,
      user_: string,
      contract_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'userTokens(address,address,address)'(
      token: string,
      user_: string,
      contract_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    withdraw(
      reciever_: string,
      interest_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'withdraw(address,uint256)'(
      reciever_: string,
      interest_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    withdrawToken(
      token_: string,
      reciever_: string,
      interest_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    'withdrawToken(address,address,uint256)'(
      token_: string,
      reciever_: string,
      interest_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>
  }

  filters: {
    Activated(
      by: string | null,
      user: string | null
    ): TypedEventFilter<[string, string], { by: string; user: string }>

    Deposit(
      by: string | null,
      user: string | null,
      satoshi: null,
      amount: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { by: string; user: string; satoshi: BigNumber; amount: BigNumber }
    >

    DepositToken(
      token: string | null,
      by: string | null,
      user: string | null,
      amount: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { token: string; by: string; user: string; amount: BigNumber }
    >

    Withdraw(
      from: string | null,
      user: string | null,
      amount: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; user: string; amount: BigNumber }
    >

    WithdrawToken(
      token: string | null,
      from: string | null,
      user: string | null,
      amount: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { token: string; from: string; user: string; amount: BigNumber }
    >
  }

  estimateGas: {
    activation(
      sender_: string,
      airDrop_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'activation(address,uint256)'(
      sender_: string,
      airDrop_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    bnbToSatoshi(
      value_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'bnbToSatoshi(uint256)'(
      value_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    btcToBnbPrice(overrides?: CallOverrides): Promise<BigNumber>

    'btcToBnbPrice()'(overrides?: CallOverrides): Promise<BigNumber>

    btcToSatoshi(
      value_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'btcToSatoshi(uint256)'(
      value_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    burnWithStt(
      from_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'burnWithStt(address,uint256)'(
      from_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    deposit(
      sender_: string,
      value_: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'deposit(address,uint256)'(
      sender_: string,
      value_: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    depositToken(
      token_: string,
      spender_: string,
      value_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'depositToken(address,address,uint256)'(
      token_: string,
      spender_: string,
      value_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    payWithStt(
      reciever_: string,
      interest_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'payWithStt(address,uint256)'(
      reciever_: string,
      interest_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    sttPrice(overrides?: CallOverrides): Promise<BigNumber>

    'sttPrice()'(overrides?: CallOverrides): Promise<BigNumber>

    sttsToBnb(
      value_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'sttsToBnb(uint256)'(
      value_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    sttsToBnbPrice(overrides?: CallOverrides): Promise<BigNumber>

    'sttsToBnbPrice()'(overrides?: CallOverrides): Promise<BigNumber>

    sttsToSatoshi(
      value_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'sttsToSatoshi(uint256)'(
      value_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    totalBalances(overrides?: CallOverrides): Promise<BigNumber>

    'totalBalances()'(overrides?: CallOverrides): Promise<BigNumber>

    totalSatoshi(overrides?: CallOverrides): Promise<BigNumber>

    'totalSatoshi()'(overrides?: CallOverrides): Promise<BigNumber>

    userBalances(
      user_: string,
      contract_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'userBalances(address,address)'(
      user_: string,
      contract_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    userTokens(
      token: string,
      user_: string,
      contract_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    'userTokens(address,address,address)'(
      token: string,
      user_: string,
      contract_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    withdraw(
      reciever_: string,
      interest_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'withdraw(address,uint256)'(
      reciever_: string,
      interest_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    withdrawToken(
      token_: string,
      reciever_: string,
      interest_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    'withdrawToken(address,address,uint256)'(
      token_: string,
      reciever_: string,
      interest_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    activation(
      sender_: string,
      airDrop_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'activation(address,uint256)'(
      sender_: string,
      airDrop_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    bnbToSatoshi(
      value_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'bnbToSatoshi(uint256)'(
      value_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    btcToBnbPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'btcToBnbPrice()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    btcToSatoshi(
      value_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'btcToSatoshi(uint256)'(
      value_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    burnWithStt(
      from_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'burnWithStt(address,uint256)'(
      from_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    deposit(
      sender_: string,
      value_: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'deposit(address,uint256)'(
      sender_: string,
      value_: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    depositToken(
      token_: string,
      spender_: string,
      value_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'depositToken(address,address,uint256)'(
      token_: string,
      spender_: string,
      value_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    payWithStt(
      reciever_: string,
      interest_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'payWithStt(address,uint256)'(
      reciever_: string,
      interest_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    sttPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'sttPrice()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    sttsToBnb(
      value_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'sttsToBnb(uint256)'(
      value_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    sttsToBnbPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'sttsToBnbPrice()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    sttsToSatoshi(
      value_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'sttsToSatoshi(uint256)'(
      value_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    totalBalances(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'totalBalances()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalSatoshi(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'totalSatoshi()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

    userBalances(
      user_: string,
      contract_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'userBalances(address,address)'(
      user_: string,
      contract_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    userTokens(
      token: string,
      user_: string,
      contract_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    'userTokens(address,address,address)'(
      token: string,
      user_: string,
      contract_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    withdraw(
      reciever_: string,
      interest_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'withdraw(address,uint256)'(
      reciever_: string,
      interest_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    withdrawToken(
      token_: string,
      reciever_: string,
      interest_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    'withdrawToken(address,address,uint256)'(
      token_: string,
      reciever_: string,
      interest_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>
  }
}
